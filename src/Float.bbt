REM >!Float
REM
REM Copyright 1999-2015, Stephen Fryatt (info@stevefryatt.org.uk)
REM
REM This file is part of Float:
REM
REM   http://www.stevefryatt.org.uk/software/
REM
REM Licensed under the EUPL, Version 1.2 only (the "Licence");
REM You may not use this work except in compliance with the
REM Licence.
REM
REM You may obtain a copy of the Licence at:
REM
REM   http://joinup.ec.europa.eu/software/page/eupl
REM
REM Unless required by applicable law or agreed to in
REM writing, software distributed under the Licence is
REM distributed on an "AS IS" basis, WITHOUT WARRANTIES
REM OR CONDITIONS OF ANY KIND, either express or implied.
REM
REM See the Licence for the specific language governing
REM permissions and limitations under the Licence.

LIBRARY "BASIC:Config"
LIBRARY "BASIC:Icon"
LIBRARY "BASIC:Menu"
LIBRARY "BASIC:Message"
LIBRARY "BASIC:Resources"
LIBRARY "BASIC:String"
LIBRARY "BASIC:Template"
LIBRARY "BASIC:Url"
LIBRARY "BASIC:WimpError"
LIBRARY "BASIC:WimpSprite"
LIBRARY "BASIC:Window"

LIBRARY "src/Choices.bbt"
LIBRARY "src/Code.bbt"
LIBRARY "src/Ignore.bbt"
LIBRARY "src/Mem.bbt"
LIBRARY "src/TaskMenu.bbt"
LIBRARY "src/Tokens.bbt"

REM These values get replaced by tokenize.

build_version$ = "-.--"
build_date$ = "DD Mmm YYYY"

PROCwimperror_initialise("Float", "!float")
ON ERROR result% = FNwimperror_program : END

PROCinitialise

ON ERROR Quit% = FNwimperror_program

WHILE NOT Quit%
	PROCpoll
ENDWHILE

PROCclose_down

END




REM Poll the Wimp using Wimp_PollIdle and process the returned reason code.
:
DEF PROCpoll
LOCAL reason%

SYS "Wimp_PollIdle", &3830 + ((NOT ChoicesDisplayBubbles%) AND 1), b%, NextPoll% TO reason%

SYS "OS_ReadMonotonicTime" TO NextPoll%
NextPoll% += ChoicesPollDelay%

CASE reason% OF
	WHEN 0		: PROCidle_event
	WHEN 1		: IF NOT FNignore_process_redraw(b%) THEN PROCredraw_bubble(b%)
	WHEN 2		: SYS "Wimp_OpenWindow",,b%
	WHEN 3		: SYS "Wimp_CloseWindow",,b%
	WHEN 6		: PROCmouse_click(b%)
	WHEN 8		: PROCkeypress_handler(b%)
	WHEN 9		: PROCmenu_selection(b%)
	WHEN 17, 18	: PROCwimp_message(b%)
	WHEN 19		: PROCbounced_message(b%)
ENDCASE
ENDPROC




REM Handle idle events from the Wimp: monitor the mouse and produce help bubbles
REM as requred.
:
DEF PROCidle_event
LOCAL still_time%, significant_movement%, window_change%, icon_change%
LOCAL key_pressed%, mouse_pressed%, mouse_released%, pointer%

REM Get the pointer position and set up some variables to idicate the current state.
REM significant_movement% is TRUE if the mouse has moved more than a given amount.
REM window_icon_change% is TRUE if the window or icon under the pointer has changed since the last
REM poll, key_pressed% is TRUE if a key or mouse button has been pressed.

pointer% = FNmem_stack(20)
IF pointer% = 0 THEN ENDPROC

SYS "Wimp_GetPointerInfo",,pointer%

significant_movement% = (ABS(pointer%!0 - LastMouseX%) > ChoicesMouseJitter% OR ABS(pointer%!4 - LastMouseY%) > ChoicesMouseJitter%)
window_change% = (LastMouseWindow% <> pointer%!12)
icon_change% = (LastMouseIcon% <> pointer%!16)
key_pressed% = FNcode_key_pressed
mouse_pressed% = FNcode_mouse_pressed
mouse_released% = FNcode_mouse_released

IF mouse_pressed% THEN MouseDragging% = TRUE
IF MouseDragging% AND mouse_released% AND NOT significant_movement% THEN MouseDragging% = FALSE

SYS "OS_ReadMonotonicTime" TO current_time%
still_time% = (current_time% - LastMouseStillTime%)

REM If there's a bubble open, then we need to decide if it needs to move or
REM or close as a result of events.

IF BubbleOpen% THEN
	CASE TRUE OF
	WHEN significant_movement%
		PROCclose_bubble
		LastMouseX% = pointer%!0
		LastMouseY% = pointer%!4
	WHEN window_change% OR icon_change%
		PROCclose_bubble
	WHEN (key_pressed% AND ChoicesHideOnClick%)
		PROCclose_bubble
	WHEN (still_time% > ChoicesKillDelay% AND ChoicesKillBubbles%)
		PROCclose_bubble
	ENDCASE
ENDIF

REM If the window or icon has changed, or there has been "significant" movement
REM of the pointer, update the details and decide whether to open a new bubble.

IF window_change% OR icon_change% OR significant_movement% THEN
	LastMouseWindow% = pointer%!12
	LastMouseIcon% = pointer%!16
	LastMouseX% = pointer%!0
	LastMouseY% = pointer%!4
	SYS "OS_ReadMonotonicTime" TO LastMouseStillTime%
	IF NOT (ChoicesHideAcrossDrags% AND MouseDragging%) THEN WaitingToOpen% = ChoicesDisplayBubbles%
ENDIF

REM Detect the end of a mouse drag, after using the drag status.

IF mouse_released% THEN MouseDragging% = FALSE

REM If, after everything else, we're still waiting to open a new bubble, request
REM the details and thereby kick off a new bubble creation process.

IF WaitingToOpen% THEN
	IF key_pressed% THEN WaitingToOpen% = FALSE
	IF still_time% > ChoicesBubbleDelay% THEN
		WaitingToOpen% = FALSE
		PROCget_help_text(pointer%)
	ENDIF
ENDIF

PROCmem_free(pointer%)
ENDPROC




REM Respond to mouse click events from the Wimp.
REM
REM \param block%		Pointer to the mouse click event block.
:
DEF PROCmouse_click(block%)

REM Pass the event details around any code modules that might be interested.

IF FNchoices_process_mouse(block%) THEN ENDPROC
IF FNignore_process_mouse(block%) THEN ENDPROC

REM If we're still here, try to handle the event directly.

CASE block%!12 OF
WHEN -2
	CASE block%!8 OF
	WHEN 4
		PROCset_help_state(NOT ChoicesDisplayBubbles%)
	WHEN 2
		PROCmenu_set_state(IconbarMenu%, 3, ShowAllHelp%, FALSE)
		PROCmenu_create_iconbar(IconbarMenu%, !block%)
	WHEN 1
		PROCchoices_open_window(!block%, block%!4)
	ENDCASE

WHEN ColoursWindow%
	IF block%!16 >= 1 THEN PROCchoices_colour_selection(block%!16 - 1)
	PROCwindow_close(ColoursWindow%)

WHEN InfoWindow%
	IF block%!16 = 8 THEN
		PROCurl_launch(FNmessage_lookup("SupportURL"))
		PROCmenu_create(-1, 0, 0)
	ENDIF
ENDCASE
ENDPROC




REM Respond to keypress events from the Wimp.
REM
REM \param block%		Pointer to the keypress event block.
:
DEF PROCkeypress_handler(block%)

REM Pass the event details around to any code modules that might be interested.

IF FNchoices_process_keypress(block%) THEN ENDPROC

SYS "Wimp_ProcessKey", block%!24
ENDPROC




REM Respond to menu selection events from the Wimp.
REM
REM \param block%		Pointer to the menu selection event block.
:
DEF PROCmenu_selection(block%)
LOCAL re_open_menu%, font_name$

REM Check if ADJUST was used to make the selection.

SYS "Wimp_GetPointerInfo",, q%
re_open_menu% = (q%!8 = 1)

REM Act on the menu choice.

CASE FNmenu_current_handle OF
WHEN IconbarMenu%
	CASE !block% OF
	WHEN 1
		OSCLI("%Filer_Run Float:!Help")
	WHEN 2
		PROCchoices_open_window(!q%, q%!4)
	WHEN 3
		ShowAllHelp% = NOT ShowAllHelp%
		PROCmenu_set_state(IconbarMenu%, 3, ShowAllHelp%, FALSE)
	WHEN 4
		Quit% = TRUE
	ENDCASE

WHEN FontMenu%
	SYS "Font_DecodeMenu", 0, FontMenu%, block%, q%, 255
	SYS "XOS_GenerateError", q% TO font_name$
	PROCchoices_font_menu_selection(font_name$)

	REM NB. This relies on the fact that FNbuild_font_menu will always return
	REM the same address, as it claims the shared pool from the end of the
	REM WimpSlot. If the value returned could ever change, the Adjust-click
	REM support would break messily.

	PROCdelete_font_menu
	IF re_open_menu% THEN
		FontMenu% = FNbuild_font_menu
	ELSE
		FontMenu% = 0
	ENDIF

WHEN TaskMenu%
	PROCchoices_task_menu_selection(FNtaskmenu_decode(!block%))

	REM NB. Reopening the menu relies on the fact that we do not bother
	REM rebuilding the menu (because there's no tick, and we ignore the
	REM possibility that a task might have started in the meantime). If the
	REM menu were re-built via a call to FNtaskmenu_build, the base address
	REM of the menu could move which would break the Wimp as it would no
	REM longer be seen as the "same" menu.

	IF NOT re_open_menu% THEN
		PROCtaskmenu_delete
		TaskMenu% = 0
	ENDIF
ENDCASE

REM Re-open the menu if ADJUST was used, otherwise inform the menu library that
REM it has closed.

IF re_open_menu% THEN
	PROCmenu_create(FNmenu_current_handle, 0, 0)
ELSE
	PROCmenu_closed
ENDIF
ENDPROC




REM Respond to user message events from the Wimp.
REM
REM \param message%		Pointer to the message block.
:
DEF PROCwimp_message(message%)
LOCAL task_name$

CASE message%!16 OF
WHEN &0
	Quit% = TRUE

WHEN &502
	PROCsend_interactive_help(message%)

WHEN &503
	IF (NOT FNignore_task(message%!4)) OR ShowAllHelp% THEN PROCexpand_text(message% + 20)

WHEN &504
	PROCmessage_help_enable

WHEN &400C1
	PROCnew_mode

WHEN &400C2
	SYS "XOS_GenerateError", message% + 28 TO task_name$
	PROCignore_task_starting(message%!4, task_name$)

WHEN &400C3
	PROCignore_task_quitting(message%!4)

WHEN &400C9
	CASE message%!20 OF
	WHEN FontMenu%
		PROCdelete_font_menu
		FontMenu% = 0
	WHEN TaskMenu%
		PROCtaskmenu_delete
		TaskMenu% = 0
	ENDCASE
	PROCmenu_closed

WHEN &400CF
	PROClose_font
	PROCfind_font

WHEN &4E383
	PROCurl_bounce(message%)
ENDCASE
ENDPROC




REM Respond to bounced message events from the Wimp.
REM
REM \param message%		Pointer to the message block.
:
DEF PROCbounced_message(message%)
CASE message%!16 OF
WHEN &502
	IF ChoicesShowDefaultHelp% OR ShowAllHelp% THEN PROCmake_default_task_help(HelpedTaskHandle%, IconBarHelp%)

WHEN &4AF80
	PROCurl_bounce(message%)
ENDCASE
ENDPROC


REM ====================================================================================================================
REM Initialisation and termination
REM ====================================================================================================================
:
:
:
:
DEF PROCinitialise
:
REM Initialise the program, including the WIMP.
:
LOCAL len%, resources_path$, task_name$, task_sprite$, sprite_area%
:
REM Set up the global data blocks and the parameters needed for WIMP registration.
:
DIM b% 4000, q% 255, a% 255
:
REM Find the correct resources for the current territory.

resources_path$ = FNresources_find_territory_folder("Float:Resources")

REM Allocate space and load the message file into memory.

PROCmessage_initialise(resources_path$ + "Messages")

task_name$  =FNmessage_lookup("TaskName")
task_sprite$ = FNmessage_lookup("TaskSpr")
PROCwimperror_initialise(task_name$, task_sprite$)

REM Choose what messages we accept from the WIMP.

!q%=&502	: REM Message_HelpRequest
q%!4=&503	: REM Message_HelpReply
q%!8=&504	: REM Message_HelpEnable
q%!12=&400C1	: REM Message_ModeChange
q%!16=&400C2	: REM Message_TaskInitialise
q%!20=&400C3	: REM Message_TaskCloseDown
q%!24=&400C9	: REM Message_MenusDeleted
q%!28=&400CF	: REM Message_FontChanged
q%!32=&4AF80
q%!36=&4E383
q%!40=0		: REM Message_Quit

REM Register as a WIMP task.

SYS "Wimp_Initialise", 310, &4B534154, task_name$, q% TO TaskHandle%

REM Set the quit flag to false so we don't quit immediately.  Get the current time ready for
REM calling Wimp_PollIdle - this will cause the first null poll to be returned immediately.

Quit% = FALSE
SYS "OS_ReadMonotonicTime" TO NextPoll%

REM Initialise the WimpSlot

PROCmem_initialise

REM Load the help message tokens

PROCtokens_initialise(resources_path$)

REM Allocate space for the indirected icon data and load the templaes file into memory, creating the
REM windows as we go.

ind_size% = 3000
DIM ind_area% ind_size%

PROCtemplate_open(resources_path$ + "Templates")

PROCchoices_initialise
PROCignore_initialise
PROCtaskmenu_initialise

PROCtemplate_load("Panel", b%, ind_area%, ind_size%, -1)
SYS "Wimp_CreateWindow",,b% TO BubbleWindow%
PROCtemplate_load("ProgInfo", b%, ind_area%, ind_size%, -1)
SYS "Wimp_CreateWindow",,b% TO InfoWindow%
PROCtemplate_load("Colours", b%, ind_area%, ind_size%, -1)
SYS "Wimp_CreateWindow",,b% TO ColoursWindow%

PROCtemplate_close

$FNicon_indirection(InfoWindow%, 4) = CHR$(169) + " Stephen Fryatt, 1999-" + MID$(build_date$, 8)
$FNicon_indirection(InfoWindow%, 6) = build_version$ + " (" + build_date$ + ")"

REM Load the sprites file into memory.

sprite_area% = FNwimpsprite_load_user_sprites("Float:Sprites")

REM Load the menu definitions into memory and create the menus.

PROCmenu_initialise
!q% = InfoWindow%
PROCmenu_load_templates(resources_path$ + "Menus", q%)
IconbarMenu% = !q%
FontMenu% = 0
TaskMenu% = 0

REM Set up all the global variables

LastMouseX% = 0		: REM The last known mouse X position
LastMouseY% = 0		: REM The last known mouse Y position
LastMouseStillTime% = 0	: REM When the mouse was last known to be 'still'
LastMouseWindow% = 0	: REM The last window the mouse was over
LastMouseIcon% = 0	: REM The last icon the mouse was over
MouseDragging% = FALSE	: REM TRUE if the mouse is thought to be dragging
BubbleOpen% = FALSE	: REM TRUE if a bubble is open
WaitingToOpen% = TRUE	: REM TRUE if a bubble is still waiting to be opened
BubbleWidth% = 0	: REM The width (in OS units) of the current bubble
BubbleHeight% = 0	: REM The height (in OS units) of the current bubble
BubbleLines% = 0	: REM The number of lines of text in the current bubble
ShowAllHelp% = FALSE	: REM TRUE if we are to ignore the selective help settings in Choices.

REM Allocate arrays and memory blocks.

HelpTextBufferSize% = 4095	: REM The size of the help text buffer
DIM HelpTextBuffer% HelpTextBufferSize%
MaxHelpLines% = 1000		: REM The maximum number of lines of text in a bubble
DIM LineStart%(MaxHelpLines%), LineLength%(MaxHelpLines%), LineYOffset%(MaxHelpLines%)

REM Determine if the desktop font exists.

SYS "XWimp_ReadSysInfo", 8 TO ;flags%
DesktopFontAvailable% = ((flags% AND 1)=0)

REM Set up the default configuration and load any changes

PROCconfig_initialise(20, task_name$)

PROCconfig_init_boolean("Open bubbles", TRUE)
PROCconfig_init_boolean("Close bubbles", TRUE)
PROCconfig_init_boolean("Draw shadows", TRUE)
PROCconfig_init_boolean("Hide over drags", TRUE)
PROCconfig_init_boolean("Hide on clicks", TRUE)
PROCconfig_init_boolean("Show tool help", TRUE)
PROCconfig_init_boolean("Show bar help", TRUE)
PROCconfig_init_boolean("Identify silent apps", FALSE)
PROCconfig_init_real("Open delay", 0.6)
PROCconfig_init_real("Close delay", 10)
PROCconfig_init_integer("Foreground colour", 7)
PROCconfig_init_integer("Background colour", 1)
PROCconfig_init_integer("Shadow colour", 6)
PROCconfig_init_string("Font name", "Homerton.Bold.Oblique")
PROCconfig_init_real("Font size", 10)
PROCconfig_init_real("Font aspect", 100)
PROCconfig_init_boolean("Font use desktop", FALSE)
PROCconfig_init_integer("Mouse jitter", 8)
PROCconfig_init_integer("Poll delay", 5)
PROCconfig_init_string("Ignore tasks", "")

REM \TODO -- This probably needs to move into the Choices module so that
REM choices_save$ can be a global variable inside that module.

choices_load$ = "Choices:Float.Choices"
SYS "XOS_File",17, choices_load$ TO choices_type% ;flags%
IF (flags% AND 1)<>0 OR choices_type%<>1 THEN choices_load$="Float:Choices"
choices_save$=FNconfig_load_file(choices_load$)

REM Create all the config variables used in the program.

PROCchoices_sync

REM Set up the list of tasks to ignore.

PROCignore_load_tasks

REM Find the font we need to display the text and get the size of the screen mode.

PROCfind_font
PROCget_mode_size

REM Put an icon on the icon bar.

DIM bar_sprite% 10
IF ChoicesDisplayBubbles% THEN $bar_sprite% = "on" ELSE $bar_sprite% = "off"

!q% = -8
q%!4 = 0
q%!8 = 0
q%!12 = 68
q%!16 = 68
q%!20 = &311A
q%!24 = bar_sprite%
q%!28 = sprite_area%
q%!32 = 10
SYS "Wimp_CreateIcon", &40000000, q% TO IconbarIconHandle%

PROCcode_initialise

REM Check to see if we're the only copy of Float running. If we're not,
REM then just exit quietly.

IF FNfloat_already_running(task_name$, TaskHandle%) THEN
	PROCwimperror_report(FNmessage_lookup("Running"), 1, %10, "")
	Quit% = TRUE
ENDIF
ENDPROC
:
:
:
:
REM --------------------------------------------------------------------------------------------------------------------
:
:
:
:
DEF PROCclose_down
:
REM Close the task down, losing the font and closing the messages file first.
:
PROCcode_finalise
PROClose_font
PROCtokens_finalise
SYS "Wimp_CloseDown", TaskHandle%, &4B534154
ENDPROC
:
:
:
:
REM ====================================================================================================================
REM Interactive help (for our own windows and icons)
REM ====================================================================================================================




REM Process requests for interactive help text, sent to us for our own windows.
REM
REM \param message%		Pointer to the Message_HelpRequest block.
:
DEF PROCsend_interactive_help(message%)
LOCAL root$, suffix$, found%, message$

found% = FALSE

IF root$ = "" THEN root$ = FNchoices_get_help_token_root(message%)
IF root$ = "" THEN root$ = FNignore_get_help_token_root(message%)

REM Compare the window handle to the windows we know about, and find the
REM relevant token name.

IF root$ = "" THEN
	CASE message%!32 OF
		WHEN -2			: root$ = "IconBar"
		WHEN InfoWindow%	: root$ = "Info"
		WHEN ColoursWindow%	: root$ = "Colours"
		WHEN BubbleWindow%	: root$ = "Bubble"
		OTHERWISE		: root$ = ""
	ENDCASE
ENDIF

REM Look up the help text, either as a window message or by checking the
REM menus that belong to us.
REM
REM The bubble window is a special case, as we don't want to return help for
REM that...

IF root$ <> "" THEN
	IF root$ <> "Bubble" THEN
		suffix$ = FNicon_validation_command(message%!32, message%!36, "N")

		REM If there's a name in the validation string, use that; otherwise
		REM check to see if there's a special case to set up.

		IF suffix$ <> "" THEN root$ += "." + suffix$
		found% = FNmessage_lookup_result("Help." + root$, message$)
	ENDIF
ELSE
	SYS "Wimp_GetMenuState", 1, q%, message%!32, message%!36
	CASE FNmenu_current_handle OF
		WHEN IconbarMenu%	: root$ = "IconBarMenu." + RIGHT$("00" + STR$(!q%), 2)
		WHEN FontMenu%		: root$ = "FontMenu." + RIGHT$("00" + STR$(!q%), 2)
		WHEN TaskMenu%		: root$ = "TaskMenu." + RIGHT$("00" + STR$(!q%), 2)
	ENDCASE
	
	IF root$ <> "" THEN found% = FNmessage_lookup_result("Help." + root$, message$)
ENDIF

REM If no message was found, give up now.

IF NOT found% THEN ENDPROC

REM If a message was found, send it back to the requestor.

IF LEN(message$) > 235 THEN message$ = LEFT$(message$, 235)

message%!12 = message%!8
message%!16 = &503
$(message% + 20) = message$ + CHR$(0)
!message% = 24 + (LEN(message$) AND &FFFFFC)
SYS "Wimp_SendMessage", 17, message%, message%!4
ENDPROC
:
:
:
:
REM ====================================================================================================================
REM Help text processing and display
REM ====================================================================================================================


REM Get the help text for the bubble, by sending a Message_HelpRequest to the
REM task owning the window or icon that is currently under the pointer.
REM
REM In the event of Message_HelpRequest being sent, the IconBarHelp% and
REM HelpedTaskHandle% variables are set so that the message bounce handler can
REM find the relevant details.
REM
REM \param pointer%		Pointer to a block of data from Wimp_GetPointerInfo
REM				indicating where the pointer is currently located.
:
DEF PROCget_help_text(pointer%)
LOCAL message%

REM If the window is the iconbar, there's nothing to do unless we're shoing
REM help for iconbar icons.

IF (pointer%!12 <= -2) AND (NOT ChoicesShowIconbarHelp%) AND (NOT ShowAllHelp%) THEN ENDPROC

REM If the icon is a standard icon or window work area, a Message_HelpRequest
REM is sent to the appropriate task for more details.
REM
REM If the icon is a piece of window furniture (ie. the icon handle is -2 or
REM less), then the correct message can be looked up immediately from the
REM message file.

IF pointer%!16 >= -1 THEN
	message% = FNmem_stack(40)
	IF message% = 0 THEN ENDPROC

	IconBarHelp% = (pointer%!12 = -2) AND (pointer%!16 <> -1)

	message%!0 = 40
	message%!12 = 0
	message%!16 = &502		: REM Message_HelpRequest
	message%!20 = pointer%!0	: REM Mouse X
	message%!24 = pointer%!4	: REM Mouse Y
	message%!28 = pointer%!8	: REM Button State
	message%!32 = pointer%!12	: REM Window Handle
	message%!36 = pointer%!16	: REM Icon Handle
	SYS "Wimp_SendMessage", 18, message%, pointer%!12, pointer%!16 TO ,,HelpedTaskHandle%
	PROCmem_free(message%)
ELSE
	IF pointer%!16 >= -14 AND pointer%!16 <= -2 AND (ChoicesShowToolHelp% OR ShowAllHelp%) THEN
		$b% = FNmessage_lookup("Furniture.I" + STR$(ABS(pointer%!16)))
		PROCexpand_text(b%)
	ENDIF
ENDIF
ENDPROC




REM Generate default help for an application which has not responded to a
REM Message_HelpRequest.  Using the task handle, the task name is looked up and
REM inserted into the default piece of text from our messages file before
REM passing this to PROCexpand_text.
REM
REM \param task_handle%		The handle of the task that requires a message.
REM \param icon_bar%		TRUE if the message is for an iconbar icon;
REM				FALSE if it is for any other window.
:
DEF PROCmake_default_task_help(task_handle%, icon_bar%)
LOCAL task_name$, token$, flags%

REM If the task is Float, just ignore the message.

IF task_handle% = TaskHandle% THEN ENDPROC

token$ = "Default."
IF icon_bar% THEN token$ += "IconBar" ELSE token$ += "Window"

SYS "XTaskManager_TaskNameFromHandle", task_handle% TO task_name$ ;flags%

IF (flags% AND 1) = 0 THEN
	$b% = FNmessage_param_lookup(token$, task_name$, "", "", "")
	PROCexpand_text(b%)
ENDIF
ENDPROC




REM Expand the help text supplied by the client, looking up the \X tokens
REM used by RISC OS and inserting font-change sequences to handle the
REM characters that require the Symbol font for display.
REM
REM Once expanded, pass the resulting text on to the bubble formatting code.
REM
REM \param original_text%	Pointer to the help text for expansion.
:
DEF PROCexpand_text(original_text%)
LOCAL o%, h%, c%, len%, symbols$, truncated$

REM The set of characters which need to be displayed in the Symbol font.

symbols$ = CHR$(&80) + CHR$(&84) + CHR$(&88) + CHR$(&89) + CHR$(&8A) + CHR$(&8B)

REM Start by 'escaping' the string, by expanding with the appropriate tokens
REM dictionary for the current OS.
REM
REM For each craracter in the string, if it is NOT a '\' copy it straight
REM in to the HelpTextBuffer% buffer and step on one place. If it is a '\',
REM get the next charater and step on one more. If the next character is a
REM '\' as well, copy one '\' into the HelpTextBuffer% buffer and move on
REM one character so that "\\" translates to "\".
REM
REM If the second character was NOT a '\', pass it to the token lookup
REM routine, to find an appropriate expansion and write it directly in to the
REM HelpTextBuffer% buffer in the correct place before the buffer pointer is
REM moved on by the length of the result.

o% = 0
h% = 0

REPEAT
	c% = original_text%?o%
	o% += 1

	IF CHR$(c%) <> "\" THEN
		IF (INSTR(symbols$, CHR$(c%)) > 0) AND (symbol_font% > 0) THEN
			HelpTextBuffer%?h% = 26
			HelpTextBuffer%?(h% + 1) = symbol_font%
			HelpTextBuffer%?(h% + 2) = c%
			HelpTextBuffer%?(h% + 3) = 26
			HelpTextBuffer%?(h% + 4) = display_font%
			h% += 5
		ELSE
			HelpTextBuffer%?h% = c%
			h% += 1
		ENDIF
	ELSE
		c% = original_text%?o%
		o% += 1

		IF CHR$(c%) = "\" THEN
			HelpTextBuffer%?h% = ASC("\")
			h% += 1
		ELSE
			h% += FNtokens_lookup(c%, HelpTextBuffer% + h%, HelpTextBufferSize% - h%)
		ENDIF
	ENDIF
UNTIL c% < 32 OR h% >= HelpTextBufferSize%

REM If the expansion ended bacause the buffer was full, terminate with a
REM message that makes this clear.

IF h% >= HelpTextBufferSize% THEN
	truncated$ = FNmessage_lookup("Truncated")
	$(HelpTextBuffer% + HelpTextBufferSize% - (LEN(truncated$) + 1)) = truncated$
	HelpTextBuffer%?(HelpTextBufferSize% - 1) = 0
ELSE
	HelpTextBuffer%?(h% - 1) = 0
ENDIF

REM Open the bubble on the screen with the string in the HelpTextBuffer%
REM buffer. This will need to be GSTrans'd and formatted first.

PROCopen_bubble(HelpTextBuffer%)
ENDPROC
:
:
:
:
REM --------------------------------------------------------------------------------------------------------------------
:
:
:
:
DEF PROCopen_bubble(text%)
:
REM Given a pointer to a string needing to be GSTrans'd, do this and then open a bubble.
:
LOCAL line%,lines%,t%,widest%,y_offset%,actual_lines%,max_width%,width%,end%,length%,line_height%
LOCAL r%,w%,double_end%,os_width%,os_height%,icon_bar_height%,x_pos%,y_pos%,shadow_size%,font_block%
:
font_block% = FNmem_stack(36)
IF font_block% = 0 THEN ENDPROC
:
REM The control terminated string is passed through a GSTrans function to 'un-escape' the '|'
REM characters in it.  '|M' is treated specially, as it must be converted into string terminators
REM for the Font_ScanString routine to cope with; these are replaced with two zero bytes as
REM terminators.  The number of lines counted is recorded from zero in lines%.
REM
REM r% is the read pointer, w% is the write pointer.  If the character read is not '|', it is
REM copied to the write pointer and both r% and w% are incremented.  If it is '|', the r% is
REM incremented and the following character is read.  If it is '|', '<' OR '"' this is copied to
REM w% and both r% and w% are incremented.  If it is 'M' (that is '|M'), then a check is made
REM to see if the last character written was a zero.  If it is, we must have just passed a
REM '|M|M' sequence (or null string) and double_end% is set to terminate the parsing; if not
REM a zero line separator is written, lines% is incremented and both r% and w% are incremented.
REM
REM All this complexity is needed as !Help teats '|M|M' as a terminator and misses apparent garbage
REM that !Zap throws at it after the '|M|M'?
:
r%=0
w%=0
lines%=0
double_end%=FALSE
:
REM Test for <>0 so as to allow font-change control chars through.
:
WHILE text%?r%<>0 AND NOT double_end%
 IF CHR$(text%?r%)="|" THEN
  r%+=1
  IF CHR$(text%?r% AND &DF)="M" THEN
   IF text%?(w%-1)<>0 THEN lines%+=1 : text%?w%=0 : w%+=1 ELSE double_end%=TRUE
  ELSE
   CASE CHR$(text%?r%) OF
    WHEN "|"  : text%?w%=ASC("|")  : w%+=1
    WHEN "<"  : text%?w%=ASC("<")  : w%+=1
    WHEN """" : text%?w%=ASC("""") : w%+=1
   ENDCASE
  ENDIF
 ELSE
  text%?w%=text%?r%
  w%+=1
 ENDIF
 :
 r%+=1
ENDWHILE
:
IF text%?(w%-1)=0 THEN lines%-=1
:
REM Add a terminator for those who do not end the help string with '|M'.
:
text%?w%=0
:
REM Set up the co-ordinates block as required by Font_ScanString.  font_block%!16 is a space for the
REM possible split character.
:
font_block%!0=0
font_block%!4=0
font_block%!8=0
font_block%!12=0
font_block%!16=32
:
REM Calculate the widest the bubble can be.
REM
REM **** Currently we just assume that it is 600 OS units; this should depend on many factors,
REM **** such as screen width.
:
SYS "Font_Converttopoints",,600 TO ,widest%
:
REM The string is now scanned with Font_ScanString to break it up into lines and prepare for
REM printing.  t% is made a temporary pointer for the text buffer, y_offset% is the current line
REM offset from the first in millipoints, actual_lines% is the number of lines to be printed,
REM max_width% is the maximum line width in millipoints and line_height% is the millipoint line
REM spacing, calculated on a fixed 120% from the font size in 16ths of a point.
:
t%=text%
y_offset%=0
actual_lines%=0
max_width%=0
SYS "Font_ReadDefn",display_font%,q% TO ,,,line_height%
line_height%=(line_height%*1000)/16*1.2
:
REM For each line found above, Font_ScanString is repeatedly called to find the line lengths that
REM will fit into the specified limit widest% in millipoints.  For each call, as long as the
REM maximum number of lines has not been exceeded the start point in the string, number of
REM characters and y offset are stored away for future use.  If the line is found to be the
REM widest so far, its width is also remembered.
REM
REM widest% is slowly increased in the event of long lines occurring.  This prevent truncation
REM and the window will grow approporiately.  If the line was zero long it is not added to the
REM list of lines found.
REM
REM **** This should check the mode width and maybe re-scan the text above as width is increased.
REM
REM The t% pointer is moved on the length of the string found by Font_ScanString and if the
REM next character is a space t% is advanced one more.  If the length of the line was non-zero
REM the offset is advanced by one line for the line spacing.
REM
REM The repeat loop is stopped when a termination control character is found.  If the last line
REM was non-zero length, a paragraph space of 1/3 line spacing is added and t% advanced across the
REM spacing zero bytes before the rest of the lines identified above are scanned in the same way.
:
FOR line%=0 TO lines%
 REPEAT
  REPEAT
   SYS "Font_ScanString",display_font%,t%,&00320,widest%,0,font_block% TO ,end%,,width%
   length%=end%-t%
   IF length%=0 THEN widest%+=500
  UNTIL length%>0 OR ?t%=0 OR ?t%=13
  :
  IF actual_lines%<=MaxHelpLines% AND length%>0 THEN
   LineStart%(actual_lines%)=t%
   LineLength%(actual_lines%)=length%
   LineYOffset%(actual_lines%)=y_offset%
   actual_lines%+=1
   IF width%>max_width% THEN max_width%=width%
  ENDIF
  :
  t%+=length%
  IF ?end%=32 THEN t%+=1
  :
  IF length%>0 THEN y_offset%+=line_height%
 UNTIL ?t%=0 OR actual_lines%>MaxHelpLines%
 :
 IF length%>0 THEN y_offset%+=line_height%/3
 :
 WHILE ?t%=0
  t%+=1
 ENDWHILE
NEXT line%
:
REM Put the bubble onto the screen, if there are any lines of text to display.
REM
REM First get details of the pointer position so that we know where to open the help bubble and can
REM check if the pointer is in the icon bar (for special positioning).
REM
REM The bubble width (max_width%) and height (y_offset%) are converted into OS units and 16 OS units
REM are added to allow some margins.  If the pointer is NOT over the icon bar, the bubble is
REM positioned under the pointer if there is room, or above it otherwise (remember y_pos% is the
REM top of the bubble).  If the pointer is over the icon bar, the bubble is positioned at the top
REM of the bar (fixed height).
REM
REM The x position is set to be the pointer position (x_pos% is the left of the bubble).  It can be
REM a minimum of 50 OS units from a screen edge, so it is then moved in if required.
:
IF actual_lines% THEN
 SYS "Wimp_GetPointerInfo",,q%
 :
 SYS "Font_ConverttoOS",,max_width%,y_offset% TO ,os_width%,os_height%
 os_width%+=16
 :
 icon_bar_height%=132
 :
 IF q%!12<>-2 THEN
  IF (q%!4)-32-os_height%<icon_bar_height% THEN y_pos%=q%!4+os_height%+20 ELSE y_pos%=q%!4-48
 ELSE
  y_pos%=icon_bar_height%+os_height%
 ENDIF
 :
 x_pos%=!q%
 IF x_pos%<50 THEN x_pos%=50
 IF x_pos%+os_width%>screen_width%-50 THEN x_pos%=screen_width%-50-os_width%
 :
 REM x_pos% and y_pos% are converted into millipoints for the Font_Paint command, with an 8 OS unit
 REM margin added on the left.  The font start point is moved down a line as fonts paint from the
 REM baseline up.  The size of the shadow is calculated (zero if there is no shadow).
 REM
 REM The bubble window is opened at the correct point to accommodate the panel and its shadow.  The
 REM vales needed by the redraw code are stored and the bubble is marked open.
 :
 shadow_size%=ChoicesDrawShadow%*-8
 :
 IF BubbleOpen% THEN PROCwindow_close(BubbleWindow%)
 :
 !q%=BubbleWindow%
 q%!4=x_pos%
 q%!8=y_pos%-os_height%-shadow_size%
 q%!12=x_pos%+os_width%+shadow_size%+2
 q%!16=y_pos%+4
 q%!20=0
 q%!24=0
 q%!28=-1
 SYS "Wimp_OpenWindow",,q%
 :
 BubbleWidth%=os_width%
 BubbleHeight%=os_height%
 BubbleLines%=actual_lines%
 :
 IF BubbleOpen% THEN PROCwindow_force_redraw(BubbleWindow%)
 BubbleOpen%=TRUE
ENDIF

PROCmem_free(font_block%)
ENDPROC




REM Redraw the bubble window.
REM
REM The redraw loop is not optimised as bubbles are supposed to be on top and so
REM the window should always be redrawn in one go.  In fact, the only real reason
REM for a redraw after the initial drawing is if F12, Return is pressed when a
REM bubble is open (and then the transparent parts of the window will be wrong).
REM
REM \param redraw%		Pointer to the redraw event block.
:
DEF PROCredraw_bubble(redraw%)
LOCAL shadow_size%, line_height%, x%, y%, x_in%, y_in%, more%, line%

REM Calculate the size of the shadow and the line height in points (120% of fint size).

shadow_size% = ChoicesDrawShadow% * -8
line_height% = (ChoicesFontSize% * 1000) / 16 * 1.2

REM Go into the WIMP redraw loop.

SYS "Wimp_RedrawWindow",,redraw% TO more%

WHILE more%
	REM Calculate the position of the top left of the bubble window,
	REM converting this to millipoints and pointing to the bottom of the
	REM first line of text (fonts are painted from the baseline)

	x% = redraw%!4 - redraw%!20
	y% = redraw%!16 - redraw%!24 - 4

	SYS "Font_Converttopoints",,x%+8, y% TO , x_in%, y_in%
	y_in% -= line_height%

	REM If there is to be a shadow, drwa it.  Then draw the box as a filled
	REM rectangle overlaid by an open rectangle.

	IF ChoicesDrawShadow% THEN
		SYS "Wimp_SetColour", ChoicesShadowColour%
		RECTANGLE FILL x% + shadow_size%, y% - BubbleHeight% - shadow_size%, BubbleWidth%, BubbleHeight%
	ENDIF

	SYS "Wimp_SetColour", ChoicesBackgroundColour%
	RECTANGLE FILL x%, y% - BubbleHeight%, BubbleWidth%, BubbleHeight%
	SYS "Wimp_SetColour", ChoicesTextColour%
	RECTANGLE x%, y% - BubbleHeight%, BubbleWidth%, BubbleHeight%

	REM Set the font colours and plot the text line by line.

	SYS "Wimp_SetFontColours",, ChoicesBackgroundColour%, ChoicesTextColour%

	FOR line% = 0 TO BubbleLines% - 1
		SYS "Font_Paint", display_font%, LineStart%(line%), &380, x_in%, y_in% - LineYOffset%(line%),,,LineLength%(line%)
	NEXT line%

	SYS "Wimp_GetRectangle",,redraw% TO more%
ENDWHILE
ENDPROC




REM Close the help bubble, closing the backing window so the Wimp redraws the
REM screen, then flag the bubble closed.
:
DEF PROCclose_bubble

IF BubbleOpen% THEN PROCwindow_close(BubbleWindow%)
BubbleOpen% = FALSE
ENDPROC
:
:
:
:
REM ====================================================================================================================
REM Misc Wimp message handlers
REM ====================================================================================================================
:
:
:
:
DEF PROCset_help_state(new_state%)
:
REM Set whether bubbles are being opened and update the icon-bar icon appropriately.
REM
REM Mainly used by clicks on the icon bar, but also by closing the config window.
:
ChoicesDisplayBubbles%=new_state%
:
IF ChoicesDisplayBubbles% THEN
 $bar_sprite%="on"
ELSE
 $bar_sprite%="off"
 PROCclose_bubble
ENDIF
PROCicon_redraw(-2, IconbarIconHandle%)
ENDPROC
:
:
:
:
REM --------------------------------------------------------------------------------------------------------------------
:
:
:
:
DEF PROCmessage_help_enable
:
REM Handle Message_HelpEnable (set the help state and reload the choices if required to).
:
PROCset_help_state((b%!20 AND 1)=0)
IF (b%!20 AND 2)=2 THEN
 PROCconfig_load_file("Float:Choices")
 PROCchoices_sync
ENDIF
:
ENDPROC
:
:
:
:
REM --------------------------------------------------------------------------------------------------------------------
:
:
:
REM In the event of a mode change, re-bind the font handle and get the new
REM mode size.
:
DEF PROCnew_mode
PROClose_font
PROCfind_font
PROCget_mode_size
ENDPROC
:
:
:
:
REM --------------------------------------------------------------------------------------------------------------------
:
:
:
:
DEF PROCget_mode_size
:
REM Set the variables screen_width% and screen_height% to be the width and height of the current
REM mode (in OS units), derived from the relevent Mode Variables.
:
LOCAL m%,n%
:
SYS "OS_ReadModeVariable",-1,11 TO ,,m%
SYS "OS_ReadModeVariable",-1,4  TO ,,n%
screen_width%=m%<<n%
:
SYS "OS_ReadModeVariable",-1,12 TO ,,m%
SYS "OS_ReadModeVariable",-1,5  TO ,,n%
screen_height%=m%<<n%
ENDPROC
:
:
:
:
REM ====================================================================================================================
REM Font management
REM ====================================================================================================================
:
:
:
:
DEF FNbuild_font_menu
:
LOCAL menu_buf%,ind_buf%,menu_buf_size%,ind_buf_size%,fonts_message_file$,mess_buf%,menu_title%, font_manager_version%
:
SYS "Font_ListFonts",,0,(1<<19),,0,,0 TO ,,,menu_buf_size%,,ind_buf_size%

menu_buf% = FNmem_claim(menu_buf_size% + ind_buf_size%)

IF menu_buf% <> 0 THEN
 ind_buf% = menu_buf% + menu_buf_size%
 SYS "Font_ListFonts",,menu_buf%, &280000, menu_buf_size%, ind_buf%, ind_buf_size%, FNchoices_font_menu_selected
 :
 SYS "Font_CacheAddr" TO font_manager_version%
 :
 IF font_manager_version%<=307 THEN
  fonts_message_file$="Resources:$.Resources.Fonts.Messages"
  SYS "OS_Module",6,,,17+LEN(fonts_message_file$) TO ,,mess_buf%
  $(mess_buf%+16)=fonts_message_file$
  SYS "MessageTrans_OpenFile",mess_buf%,mess_buf%+16,0
  SYS "MessageTrans_Lookup",mess_buf%,"FontList",0 TO ,,menu_title%
  IF LEN(FNstring_read(menu_title%))>12 THEN
   menu_buf%!28=menu_buf%!28 OR &10
  ELSE
   menu_buf%!28=menu_buf%!28 AND &FFFFFFEF
  ENDIF
  SYS "MessageTrans_CloseFile",mess_buf%
  SYS "OS_Module",7,,mess_buf%
 ENDIF
ELSE
 menu_buf%=0
ENDIF
:
=menu_buf%
:
:
:
:
REM --------------------------------------------------------------------------------------------------------------------
:
:
:
:
DEF PROCdelete_font_menu
PROCmem_release
ENDPROC
:
:
:
:
REM --------------------------------------------------------------------------------------------------------------------
:
:
:
:
DEF PROCfind_font
:
UsingDesktopFont%=FALSE
:
IF DesktopFontAvailable% AND ChoicesFontUseDesktop% THEN
 SYS "Wimp_ReadSysInfo",8 TO display_font%,symbol_font%
 UsingDesktopFont%=(display_font%<>0)
ENDIF
:
IF NOT UsingDesktopFont% THEN
 SYS "XFont_FindFont",,ChoicesFontName$,ChoicesFontAspect%*ChoicesFontSize%/100,ChoicesFontSize%,0,0 TO display_font% ;flags%
 IF (flags% AND 1) THEN SYS "Font_FindFont",,"Trinity.Medium",ChoicesFontAspect%*ChoicesFontSize%/100,ChoicesFontSize%,0,0 TO display_font%
 SYS "XFont_FindFont",,"WIMPSymbol",ChoicesFontAspect%*ChoicesFontSize%/100,ChoicesFontSize%,0,0 TO symbol_font% ;flags%
 IF (flags% AND 1) THEN symbol_font%=0
ENDIF
ENDPROC
:
:
:
:
REM --------------------------------------------------------------------------------------------------------------------
:
:
:
:
DEF PROClose_font
:
IF NOT UsingDesktopFont% THEN SYS "Font_LoseFont",display_font% : SYS "Font_LoseFont",symbol_font%
ENDPROC




REM Scan the currently active task names to see if there are any which share
REM the supplied task name but have a different task handle. If there are,
REM return TRUE to indicate another instance of Float has been found.
REM
REM \param task_name$		The task name (ours) to look for.
REM \param ignore_task%		A task handle (ours) to ignore if a match
REM				is found.
REM \return			TRUE if a task was found; FALSE if not.

DEF FNfloat_already_running(task_name$, ignore_task%)
LOCAL next_task%, info%, claim%, end%, found%

claim% = 16
info% = FNmem_stack(claim%)
IF info% = 0 THEN =FALSE

next_task% = 0
found% = FALSE

REPEAT
	SYS "TaskManager_EnumerateTasks", next_task%, info%, claim% TO next_task%, end%
	IF end% = info% + claim% THEN
		IF (FNstring_read(info%!4) = task_name$) AND (!info% <> ignore_task%) THEN found% = TRUE
	ENDIF
UNTIL (next_task% < 0) OR (found% = TRUE)

PROCmem_free(info%)
=found%


