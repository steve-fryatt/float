REM >!Float-Mem
REM
REM Copyright 2014, Stephen Fryatt (info@stevefryatt.org.uk)
REM
REM This file is part of Float:
REM
REM   http://www.stevefryatt.org.uk/software/
REM
REM Licensed under the EUPL, Version 1.1 only (the "Licence");
REM You may not use this work except in compliance with the
REM Licence.
REM
REM You may obtain a copy of the Licence at:
REM
REM   http://joinup.ec.europa.eu/software/page/eupl
REM
REM Unless required by applicable law or agreed to in
REM writing, software distributed under the Licence is
REM distributed on an "AS IS" basis, WITHOUT WARRANTIES
REM OR CONDITIONS OF ANY KIND, either express or implied.
REM
REM See the Licence for the specific language governing
REM permissions and limitations under the Licence.

REM Wimpslot Memory Allocation


REM Initialise the WimpSlot memory allocation routines.
:
DEF PROCmem_initialise
SYS "Wimp_SlotSize", -1, -1 TO MemBaseSlotSize%
ENDPROC


REM Claim a block of memory from the WimpSlot.
REM
REM \param size%		The number of bytes of memory required.
REM \return			Pointer to the block of memory, or 0 on failure.
:
DEF FNmem_claim(size%)
LOCAL new_slot_size%

SYS "Wimp_SlotSize", MemBaseSlotSize% + size%, -1 TO new_slot_size%
IF new_slot_size% < MemBaseSlotSize% + size% THEN =0
=HIMEM


REM Release a block of memory from the WimpSlot.
:
DEF PROCmem_release
SYS "Wimp_SlotSize", MemBaseSlotSize%, -1
ENDPROC

