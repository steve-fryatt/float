REM >!Float-Choices
REM
REM Copyright 1999-2015, Stephen Fryatt (info@stevefryatt.org.uk)
REM
REM This file is part of Float:
REM
REM   http://www.stevefryatt.org.uk/software/
REM
REM Licensed under the EUPL, Version 1.2 only (the "Licence");
REM You may not use this work except in compliance with the
REM Licence.
REM
REM You may obtain a copy of the Licence at:
REM
REM   http://joinup.ec.europa.eu/software/page/eupl
REM
REM Unless required by applicable law or agreed to in
REM writing, software distributed under the Licence is
REM distributed on an "AS IS" basis, WITHOUT WARRANTIES
REM OR CONDITIONS OF ANY KIND, either express or implied.
REM
REM See the Licence for the specific language governing
REM permissions and limitations under the Licence.


REM Initialise the choices module.
REM
REM This must be called while the Templates file is open.
REM
REM \TODO -- This relies on the global b%!
:
DEF PROCchoices_initialise
LOCAL ind_area%, ind_size%

REM Allocate indirected data memory for choices windows.

ind_size% = 3000
DIM ind_area% ind_size%

REM Set the window handle array for the panes.

DIM ChoicesPane%(2)
ChoicesCurrentPane% = 0

REM Load the choices templates.

PROCtemplate_load("Choices", b%, ind_area%, ind_size%, -1)
SYS "Wimp_CreateWindow",,b% TO ChoicesWindow%
PROCtemplate_load("Choices0", b%, ind_area%, ind_size%, -1)
SYS "Wimp_CreateWindow",,b% TO ChoicesPane%(0)
PROCtemplate_load("Choices1", b%, ind_area%, ind_size%, -1)
SYS "Wimp_CreateWindow",,b% TO ChoicesPane%(1)
PROCtemplate_load("Choices2", b%, ind_area%, ind_size%, -1)
SYS "Wimp_CreateWindow",,b% TO ChoicesPane%(2)

REM Initialise the colour menu selection.

ChoicesColourIcon% = 0
ENDPROC




REM Process mouse clicks in choices windows.
REM
REM \param b%			Mouse Event data block.
REM \return			TRUE if we handled the event; else FALSE.
:
DEF FNchoices_process_mouse(b%)
LOCAL processed%, block%, caret%, caret_present%, caret_icon%

processed% = TRUE

REM Handle the mouse click.

CASE b%!12 OF
WHEN ChoicesWindow%
	REM Find out if we already have the caret in the window.

	caret% = FNmem_stack(24)
	IF caret% = 0 THEN
		caret_present% = FALSE
	ELSE
		SYS "Wimp_GetCaretPosition",,caret%
		caret_present% = (!caret% = ChoicesWindow%) OR (!caret% = ChoicesPane%(ChoicesCurrentPane%))
		caret_icon% = caret%!4
		PROCmem_free(caret%)
	ENDIF

	CASE b%!8 OF
	WHEN 4 : REM Select
		CASE b%!16 OF
		WHEN 0
			PROCwindow_close(ChoicesWindow%)
			PROCwindow_close(ChoicesPane%(ChoicesCurrentPane%))
		WHEN 1
			PROCchoices_close_window(TRUE, TRUE)
		WHEN 2
			PROCchoices_close_window(TRUE, FALSE)
		WHEN 4, 5, 6
			PROCwindow_close(ChoicesPane%(ChoicesCurrentPane%))
			PROCchoices_open_pane(b%!16 - 4, caret_present%)
		ENDCASE
	WHEN 1 : REM Adjust
		CASE b%!16 OF
		WHEN 0
			PROCchoices_open_window(-1, -1)
			PROCwindow_force_redraw(ChoicesWindow%)
			IF caret_present% THEN PROCicon_put_caret_at_end(ChoicesPane%(ChoicesCurrentPane%), caret_icon%)
		WHEN 1
			PROCchoices_close_window(FALSE, TRUE)
		WHEN 2
			PROCchoices_close_window(FALSE, FALSE)
		WHEN 4, 5, 6
			PROCicon_set_selected(ChoicesWindow%, b%!16, TRUE)
			PROCwindow_close(ChoicesPane%(ChoicesCurrentPane%))
			PROCchoices_open_pane(b%!16 - 4, caret_present%)
		ENDCASE
	ENDCASE

WHEN ChoicesPane%(0)
	CASE b%!8 OF
	WHEN 4 : REM Select
		CASE b%!16 OF
		WHEN 4
			PROCicon_set_state(ChoicesPane%(0), 5, 0, NOT FNicon_selected(ChoicesPane%(0), 4), 0)
		ENDCASE
	ENDCASE

WHEN ChoicesPane%(1)
	CASE b%!8 OF
	WHEN 4 : REM Select
		CASE b%!16 OF
		WHEN 5, 8, 11
			PROCmenu_create_popup(ColoursWindow%, ChoicesPane%(1), b%!16)
			ChoicesColourIcon% = b%!16 - 1
		WHEN 14
			FontMenu% = FNbuild_font_menu
			PROCmenu_create_popup(FontMenu%, ChoicesPane%(1), 15)
		ENDCASE
	ENDCASE

WHEN ChoicesPane%(2)
	CASE b%!8 OF
	WHEN 4 : REM Select
		CASE b%!16 OF
		WHEN 4
			TaskMenu% = FNtaskmenu_build
			IF TaskMenu% <> 0 THEN PROCmenu_create_popup(TaskMenu%, ChoicesPane%(2), 4)
		WHEN 5
			PROCignore_add_choices_task_name($FNicon_indirection(ChoicesPane%(2), 3))
		WHEN 6
			PROCignore_delete_choices_tasks
		ENDCASE
	ENDCASE

OTHERWISE
	processed% = FALSE
ENDCASE

=processed%




REM Process key presses in choices windows.
REM
REM \param block%		Keypress Event data block.
REM \return			TRUE if we handled the event; else FALSE.
:
DEF FNchoices_process_keypress(block%)
LOCAL processed%

IF !block% <> ChoicesWindow% AND !block% <> ChoicesPane%(0) AND !block% <> ChoicesPane%(1) AND !block% <> ChoicesPane%(2) THEN =FALSE

processed% = TRUE

CASE block%!24 OF
WHEN 13
	PROCchoices_close_window(TRUE, FALSE)

WHEN 27
	PROCwindow_close(ChoicesWindow%)
	PROCwindow_close(ChoicesPane%(ChoicesCurrentPane%))

OTHERWISE
	processed% = FALSE

ENDCASE

=processed%




REM Return interactive help window token names for windows belonging to the
REM Choices module.
REM
REM \param message%		The message block from Message_HelpRequest
REM \return			The token if one is known, or ""
:
DEF FNchoices_get_help_token_root(message%)
LOCAL root$

CASE message%!32 OF
	WHEN ChoicesWindow%	: root$ = "Choices"
	WHEN ChoicesPane%(0)	: root$ = "Choices0"
	WHEN ChoicesPane%(1)	: root$ = "Choices1"
	WHEN ChoicesPane%(2)	: root$ = "Choices2"
	OTHERWISE		: root$ = ""
ENDCASE

=root$




REM Copy the information from the configuration settings into the icons in
REM the Choices dialogue, before optionally opening it on the screen if
REM both x% and y% are >= 0.
REM
REM \param x%			The X coordinate to open the dialogue at.
REM \param y%			The Y coordinate to open the dialogue at.
:
DEF PROCchoices_open_window(x%, y%)
LOCAL loop%

PROCicon_set_state(ChoicesPane%(0), 2, FNconfig_read_boolean("Open bubbles"), 0, 0)
PROCicon_set_state(ChoicesPane%(0), 3, ChoicesKillBubbles%, 0, 0)
PROCicon_set_state(ChoicesPane%(0), 4, ChoicesHideOnClick%, 0, 0)
PROCicon_set_state(ChoicesPane%(0), 5, ChoicesHideAcrossDrags%, NOT ChoicesHideOnClick%, 0)
PROCicon_set_state(ChoicesPane%(0), 14, ChoicesShowToolHelp%, 0, 0)
PROCicon_set_state(ChoicesPane%(0), 15, ChoicesShowIconbarHelp%, 0, 0)
PROCicon_set_state(ChoicesPane%(0), 16, ChoicesShowDefaultHelp%, 0, 0)
PROCicon_set_indirected_text(ChoicesPane%(0), 7, FNchoices_format_number(ChoicesBubbleDelay% / 100, 1))
PROCicon_set_indirected_text(ChoicesPane%(0), 10, FNchoices_format_number((ChoicesKillDelay% - ChoicesBubbleDelay%) / 100, 1))

PROCicon_set_state(ChoicesPane%(1), 0, ChoicesDrawShadow%, 0, 0)
PROCicon_set_state(ChoicesPane%(1), 17, ChoicesFontUseDesktop% AND DesktopFontAvailable%, NOT DesktopFontAvailable%, 0)
PROCicon_set_indirected_text(ChoicesPane%(1), 15, ChoicesFontName$)
PROCicon_set_indirected_text(ChoicesPane%(1), 19, FNchoices_format_number(ChoicesFontSize% / 16, 1))
PROCicon_set_indirected_text(ChoicesPane%(1), 21, STR$(ChoicesFontAspect%))
PROCchoices_set_colour_icon(ChoicesPane%(1), 4, ChoicesTextColour%)
PROCchoices_set_colour_icon(ChoicesPane%(1), 7, ChoicesBackgroundColour%)
PROCchoices_set_colour_icon(ChoicesPane%(1), 10, ChoicesShadowColour%)

PROCicon_set_indirected_text(ChoicesPane%(2), 3, "")
PROCignore_fill_choices_window

IF x% >= 0 AND y% >= 0 THEN
	ChoicesCurrentPane% = 0
	FOR loop% = 0 TO 2
		PROCicon_set_selected(ChoicesWindow%, 4 + loop%, (loop% = ChoicesCurrentPane%))
	NEXT loop%
	PROCwindow_open_centred_at(ChoicesWindow%, x%, y%)
	PROCchoices_open_pane(0, TRUE)
ENDIF
ENDPROC




REM Open a pane of the Choices dialogue, nesting it in the appropriate place
REM in the parent window. If the pane has sub-panes, open those nested as well.
REM
REM \param pane%		The index number of the pane to be opened.
REM \param place_caret%		TRUE to place the caret in the first writable
REM				icon; FALSE to do nothing.
:
DEF PROCchoices_open_pane(pane%, place_caret%)
ChoicesCurrentPane% = pane%

PROCwindow_open_nested_in_icon(ChoicesPane%(ChoicesCurrentPane%), ChoicesWindow%, 3, 0, -1)
IF ChoicesCurrentPane% = 2 THEN
	PROCwindow_open_nested_in_icon(FNignore_get_pane_handle, ChoicesPane%(ChoicesCurrentPane%), 2, 44, -1)
	PROCignore_set_pane_extent
ENDIF

REM Replace the caret if we need to.

IF place_caret% THEN
	CASE ChoicesCurrentPane% OF
		WHEN 0 : PROCicon_put_caret_at_end(ChoicesPane%(0), 7)
		WHEN 1 : PROCicon_put_caret_at_end(ChoicesPane%(1), 19)
		WHEN 2 : PROCicon_put_caret_at_end(ChoicesPane%(2), 3)
	ENDCASE
ENDIF
ENDPROC




DEF PROCchoices_close_window(close%, save%)
:
REM Store the contents of the options window into the configuration structure and re-sync the
REM variables used by the program. Close the window and/or save the new options.
:
LOCAL old_open_state%, change_open_state%
:
old_open_state% = ChoicesDisplayBubbles%
change_open_state% = (FNconfig_read_boolean("Open bubbles") <> FNicon_selected(ChoicesWindow%, 0))
:
PROCconfig_set_boolean("Open bubbles", FNicon_selected(ChoicesPane%(0), 2))
PROCconfig_set_boolean("Close bubbles", FNicon_selected(ChoicesPane%(0), 3))
PROCconfig_set_boolean("Hide on clicks", FNicon_selected(ChoicesPane%(0), 4))
PROCconfig_set_boolean("Hide over drags", FNicon_selected(ChoicesPane%(0), 5))
PROCconfig_set_boolean("Show tool help", FNicon_selected(ChoicesPane%(0), 14))
PROCconfig_set_boolean("Show bar help", FNicon_selected(ChoicesPane%(0), 15))
PROCconfig_set_boolean("Identify silent apps", FNicon_selected(ChoicesPane%(0), 16))
PROCconfig_set_real("Open delay", VAL($FNicon_indirection(ChoicesPane%(0), 7)))
PROCconfig_set_real("Close delay", VAL($FNicon_indirection(ChoicesPane%(0), 10)))
PROCconfig_set_boolean("Draw shadows", FNicon_selected(ChoicesPane%(1), 0))
PROCconfig_set_string("Font name", FNstring_read(FNicon_indirection(ChoicesPane%(1), 15)))
PROCconfig_set_real("Font size", VAL($FNicon_indirection(ChoicesPane%(1), 19)))
PROCconfig_set_real("Font aspect", VAL($FNicon_indirection(ChoicesPane%(1), 21)))
IF DesktopFontAvailable% THEN PROCconfig_set_boolean("Font use desktop", FNicon_selected(ChoicesPane%(1), 17))
:
PROCconfig_set_real("Foreground colour", FNicon_background_colour(ChoicesPane%(1), 4))
PROCconfig_set_real("Background colour", FNicon_background_colour(ChoicesPane%(1), 7))
PROCconfig_set_real("Shadow colour", FNicon_background_colour(ChoicesPane%(1), 10))
:
PROCignore_save_choices_window
:
PROCchoices_sync
PROClose_font
PROCfind_font
IF change_open_state% THEN PROCset_help_state(ChoicesDisplayBubbles%) ELSE PROCset_help_state(old_open_state%)
IF close% THEN PROCwindow_close(ChoicesWindow%)
:
IF save% THEN
	IF choices_save$ = "" THEN
		SYS "XOS_ReadVarVal", "Choices$Write", 0, -1, 0, 0 TO ,,new_choices%
		IF new_choices% <> 0 THEN
			SYS "XOS_ReadVarVal", "Choices$Write", q%, 256, 0, 0 TO ,,len%
			q%?len% = 13
			choices_save$ = $q% + ".Float"
			SYS "OS_File", 17, choices_save$ TO object%
			IF object% = 0 THEN SYS "OS_File", 8, choices_save$
				choices_save$ += ".Choices"
			ELSE
				choices_save$ = "<Float$Dir>.Choices"
			ENDIF
		ENDIF

		PROCconfig_save_file(choices_save$)
	ENDIF
ENDPROC

DEF PROCchoices_sync
:
REM Derive the actual veriables used by the program from the configuration information stored in the
REM config library routines.
:
ChoicesFontSize% = FNconfig_read_real("Font size") * 16
ChoicesFontAspect% = FNconfig_read_real("Font aspect")
ChoicesFontName$ = FNconfig_read_string("Font name")
ChoicesFontUseDesktop% = FNconfig_read_boolean("Font use desktop") AND DesktopFontAvailable%
ChoicesBubbleDelay% = FNconfig_read_real("Open delay") * 100
ChoicesKillDelay% = FNconfig_read_real("Close delay") * 100 + ChoicesBubbleDelay%
ChoicesKillBubbles% = FNconfig_read_boolean("Close bubbles")
ChoicesDrawShadow% = FNconfig_read_boolean("Draw shadows")
ChoicesDisplayBubbles% = FNconfig_read_boolean("Open bubbles")
ChoicesHideAcrossDrags% = FNconfig_read_boolean("Hide over drags")
ChoicesHideOnClick% = FNconfig_read_boolean("Hide on clicks")
ChoicesShowToolHelp% = FNconfig_read_boolean("Show tool help")
ChoicesShowIconbarHelp% = FNconfig_read_boolean("Show bar help")
ChoicesShowDefaultHelp% = FNconfig_read_boolean("Identify silent apps")
:
ChoicesMouseJitter% = FNconfig_read_integer("Mouse jitter")
ChoicesPollDelay% = FNconfig_read_integer("Poll delay")
:
ChoicesTextColour% = FNconfig_read_integer("Foreground colour")
ChoicesBackgroundColour% = FNconfig_read_integer("Background colour")
ChoicesShadowColour% = FNconfig_read_integer("Shadow colour")
ENDPROC




REM Process a new font name for the font field. The name might be escaped, in
REM which case we need to extract the actual name from the string first.
REM
REM \param font$		The new font name, as supplied by the font menu.

DEF PROCchoices_font_menu_selection(font$)
LOCAL index%

index% = INSTR(font$, "\F")
font$ = MID$(font$, index% + 2)
index% = INSTR(font$, "\")
IF index% <> 0 THEN font$ = LEFT$(font$, index% - 1)

PROCicon_set_indirected_text(ChoicesPane%(1), 15, font$)
PROCicon_redraw(ChoicesPane%(1), 15)
ENDPROC




REM Process a new task name for the task name field.
REM
REM \param task$		The new task name, as supplied by the task
REM				name menu.
:
DEF PROCchoices_task_menu_selection(task$)
PROCicon_set_indirected_text(ChoicesPane%(2), 3, task$)
PROCicon_redraw(ChoicesPane%(2), 3)
IF FNicon_test_for_caret(ChoicesPane%(2), 3) THEN PROCicon_put_caret_at_end(ChoicesPane%(2), 3)
ENDPROC




REM Return the name of the currently selected font.
REM
REM \return			The name of the currently selected font.
:
DEF FNchoices_font_menu_selected
=$FNicon_indirection(ChoicesPane%(1), 15)




REM Process a selection from the colour window, by updating one of the
REM icons in the chouces dialogue.
REM
REM \param colour%		The new colour selcted from the window.
:
DEF PROCchoices_colour_selection(colour%)
PROCchoices_set_colour_icon(ChoicesPane%(1), ChoicesColourIcon%, colour%)
PROCicon_redraw(ChoicesPane%(1), ChoicesColourIcon%)
ENDPROC



REM Convert a number into a string, to a fixed number of decimal places.
REM
REM \param number		The number to be formatted.
REM \param places%		The number of decmal places to be used.
REM \return			The number formatted as a string.
:
DEF FNchoices_format_number(number, places%)
LOCAL @%
@% = &01020010 + (places% << 8)
=STR$(number)




REM Set a colour icon to a new value: set the background to the correct
REM colour and change the foreground text colour to a suitable contrast.
REM
REM \param window%		The window containing the icon.
REM \param icon%		The icon to be set.
REM \param colour%		The colour to set the icon to.
:
DEF PROCchoices_set_colour_icon(window%, icon%, colour%)
LOCAL foreground%

IF colour% >= 4 AND colour% <= 8 THEN foreground% = 0 ELSE foreground% = 7
PROCicon_set_colours(window%, icon%, foreground%, colour%)
PROCicon_set_indirected_text(window%, icon%, STR$(colour%))
ENDPROC

